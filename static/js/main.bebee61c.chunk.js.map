{"version":3,"sources":["Components/Header/Header.js","Components/Order/Order.js","Components/Menu/Menu.js","Components/Cart/Cart.js","App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","grow","flexGrow","title","display","paddingLeft","breakpoints","up","Header","cartItems","setOpenCart","classes","className","AppBar","position","Toolbar","Typography","variant","noWrap","sectionDesktop","IconButton","color","onClick","Badge","badgeContent","length","form","flexDirection","margin","width","formControl","marginTop","spacing","minWidth","formControlLabel","Order","open","setOpen","tempItem","setOpenSuccess","setCartItems","useState","size","setSize","amount","setAmount","handleClose","Dialog","fullWidth","maxWidth","onClose","DialogTitle","id","name","DialogContent","DialogContentText","prices","small","medium","large","noValidate","FormControl","InputLabel","htmlFor","Select","autoFocus","value","onChange","event","target","inputProps","MenuItem","TextField","label","type","InputLabelProps","shrink","InputProps","max","min","Button","tempData","price","push","currentItems","newCart","concat","DialogActions","menuItems","data","menu","root","fontSize","description","pos","marginBottom","MenuWrapper","styled","div","MenuItems","Menu","setTempItem","React","HtmlTooltip","withStyles","tooltip","backgroundColor","typography","pxToRem","border","Tooltip","map","item","index","updateOrder","Small","Medium","Large","Card","CardContent","gutterBottom","src","image","alt","CartWrapper","Cart","openCart","setOrderSuccess","currency","Intl","NumberFormat","style","subtotal","reduce","x","y","parseFloat","taxes","total","palette","background","paper","List","ListItem","ListItemAvatar","arrow","newItems","filter","removeItem","ListItemText","primary","secondary","format","Divider","component","Alert","props","elevation","App","orderSuccess","reason","handleCloseOrder","useEffect","Snackbar","autoHideDuration","severity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bebee61c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport CoffeeIcon from \"@material-ui/icons/LocalCafe\";\r\nimport ShoppingCartIcon from \"@material-ui/icons/ShoppingCart\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    display: \"none\",\r\n    paddingLeft: \"1rem\",\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      display: \"block\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Header = ({ cartItems, setOpenCart }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.grow}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <CoffeeIcon />\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            Coffee App\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          <div className={classes.sectionDesktop}>\r\n            <IconButton\r\n              aria-label=\"show cart items\"\r\n              color=\"inherit\"\r\n              onClick={() => setOpenCart(true)}\r\n            >\r\n              <Badge badgeContent={cartItems.length} color=\"secondary\">\r\n                <ShoppingCartIcon />\r\n              </Badge>\r\n            </IconButton>\r\n          </div>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { React, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  form: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    margin: \"auto\",\r\n    width: \"fit-content\",\r\n  },\r\n  formControl: {\r\n    marginTop: theme.spacing(2),\r\n    minWidth: 120,\r\n  },\r\n  formControlLabel: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst Order = ({\r\n  open,\r\n  setOpen,\r\n  tempItem,\r\n  setOpenSuccess,\r\n  cartItems,\r\n  setCartItems,\r\n}) => {\r\n  const classes = useStyles();\r\n  const [size, setSize] = useState(\"Medium\");\r\n  const [amount, setAmount] = useState(\"0\");\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleSizeChange = (event) => {\r\n    setSize(event.target.value);\r\n  };\r\n\r\n  const handleAmountChange = (event) => {\r\n    setAmount(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Dialog\r\n        fullWidth={true}\r\n        maxWidth={\"sm\"}\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"max-width-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"max-width-dialog-title\">\r\n          Customize your {tempItem.name}\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <center>\r\n            <DialogContentText>\r\n              {tempItem.length && (\r\n                <>\r\n                  Small: ${tempItem.prices.small} Medium: $\r\n                  {tempItem.prices.medium} Large: ${tempItem.prices.large}{\" \"}\r\n                </>\r\n              )}\r\n            </DialogContentText>\r\n          </center>\r\n          <form className={classes.form} noValidate>\r\n            <FormControl className={classes.formControl}>\r\n              <InputLabel htmlFor=\"coffee-size\">Size</InputLabel>\r\n              <Select\r\n                autoFocus\r\n                value={size}\r\n                onChange={handleSizeChange}\r\n                inputProps={{\r\n                  name: \"coffee-size\",\r\n                  id: \"coffee-size\",\r\n                }}\r\n              >\r\n                <MenuItem value=\"Small\">Small</MenuItem>\r\n                <MenuItem value=\"Medium\">Medium</MenuItem>\r\n                <MenuItem value=\"Large\">Large</MenuItem>\r\n              </Select>\r\n            </FormControl>\r\n            <FormControl className={classes.formControl}>\r\n              <TextField\r\n                id=\"standard-number\"\r\n                label=\"Amount\"\r\n                type=\"number\"\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                InputProps={{\r\n                  inputProps: {\r\n                    max: 10,\r\n                    min: 1,\r\n                  },\r\n                }}\r\n                onChange={handleAmountChange}\r\n              />\r\n            </FormControl>\r\n            <br />\r\n            <Button\r\n              onClick={() => {\r\n                if (amount > 0 && amount < 11) {\r\n                  let tempData = [];\r\n                  tempItem.size = size;\r\n                  tempItem.amount = amount;\r\n                  tempItem.price = tempItem.prices[size];\r\n                  tempData.push(tempItem);\r\n                  const currentItems = cartItems;\r\n                  const newCart = tempData.concat(currentItems);\r\n                  setCartItems(newCart);\r\n                  setOpenSuccess(true);\r\n                  handleClose();\r\n                }\r\n              }}\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n            >\r\n              Add\r\n            </Button>\r\n          </form>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Order;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport data from \"../../data.json\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Order from \"../Order/Order\";\r\n\r\nconst menuItems = data.menu;\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  description: {\r\n    fontSize: 12,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nconst MenuWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  margin-top: 2rem;\r\n`;\r\n\r\nconst MenuItems = styled.div`\r\n  color: #3f51b5;\r\n  &:hover {\r\n    transform: scale(1.1);\r\n  }\r\n  padding-right: 3rem;\r\n  padding-bottom: 3rem;\r\n`;\r\n\r\nconst Menu = ({\r\n  cartItems,\r\n  setCartItems,\r\n  tempItem,\r\n  setTempItem,\r\n  setOpenSuccess,\r\n}) => {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const updateOrder = (item) => {\r\n    setTempItem(item);\r\n    setOpen(true);\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  const HtmlTooltip = withStyles((theme) => ({\r\n    tooltip: {\r\n      backgroundColor: \"#f5f5f9\",\r\n      color: \"rgba(0, 0, 0, 0.87)\",\r\n      maxWidth: 220,\r\n      fontSize: theme.typography.pxToRem(12),\r\n      border: \"1px solid #dadde9\",\r\n    },\r\n  }))(Tooltip);\r\n\r\n  return (\r\n    <MenuWrapper>\r\n      <Order\r\n        open={open}\r\n        setOpen={setOpen}\r\n        tempItem={tempItem}\r\n        setOpenSuccess={setOpenSuccess}\r\n        cartItems={cartItems}\r\n        setCartItems={setCartItems}\r\n      />\r\n      {menuItems.map((item, index) => (\r\n        <MenuItems key={index} onClick={() => updateOrder(item)}>\r\n          <HtmlTooltip\r\n            title={\r\n              <>\r\n                <Typography color=\"inherit\">Click to Order</Typography>\r\n                <small>\r\n                  Small: ${item.prices.Small} Medium: ${item.prices.Medium}{\" \"}\r\n                  Large: ${item.prices.Large}\r\n                </small>\r\n              </>\r\n            }\r\n          >\r\n            <Card className={classes.root}>\r\n              <CardContent>\r\n                <Typography className={classes.title} gutterBottom>\r\n                  {item.name}\r\n                </Typography>\r\n                <img src={item.image} alt=\"\" />\r\n                <Typography\r\n                  className={classes.description}\r\n                  color=\"textSecondary\"\r\n                >\r\n                  {item.description}\r\n                  <br />\r\n                  <i>From ${item.prices.Small}</i>\r\n                </Typography>\r\n              </CardContent>\r\n            </Card>\r\n          </HtmlTooltip>\r\n        </MenuItems>\r\n      ))}\r\n    </MenuWrapper>\r\n  );\r\n};\r\n\r\nMenu.propTypes = {\r\n  cartItems: PropTypes.array.isRequired,\r\n  setCartItems: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Menu;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\n\r\nconst CartWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-top: 2rem;\r\n`;\r\n\r\nconst Cart = ({\r\n  cartItems,\r\n  setCartItems,\r\n  setOpenSuccess,\r\n  openCart,\r\n  setOpenCart,\r\n  setOrderSuccess,\r\n}) => {\r\n  const currency = new Intl.NumberFormat(\"en-US\", {\r\n    style: \"currency\",\r\n    currency: \"USD\",\r\n  });\r\n\r\n  const removeItem = (item) => {\r\n    const newItems = cartItems.filter(\r\n      (x) => x.id !== item.id && x.size !== item.size\r\n    );\r\n    setCartItems(newItems);\r\n    setOpenSuccess(true);\r\n  };\r\n\r\n  const amount = cartItems\r\n    ? cartItems.map((item) => item.price * item.amount)\r\n    : 0;\r\n  const subtotal =\r\n    amount.length > 0\r\n      ? amount.reduce((x, y) => parseFloat(x) + parseFloat(y))\r\n      : 0;\r\n  const taxes = subtotal * 0.09;\r\n  const total = subtotal + taxes;\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      width: \"100%\",\r\n      maxWidth: 360,\r\n      backgroundColor: theme.palette.background.paper,\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  const handleClose = () => {\r\n    setOpenCart(false);\r\n  };\r\n\r\n  return (\r\n    <CartWrapper>\r\n      <Dialog\r\n        fullWidth={true}\r\n        maxWidth={\"sm\"}\r\n        open={openCart}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"max-width-dialog-title\"\r\n      >\r\n        <DialogTitle id=\"max-width-dialog-title\">Cart Summary</DialogTitle>\r\n        <DialogContent>\r\n          <center>\r\n            <DialogContentText>\r\n              <List className={classes.root}>\r\n                {cartItems && cartItems.length > 0\r\n                  ? cartItems.map((item, index) => (\r\n                      <div key={index}>\r\n                        <ListItem>\r\n                          <ListItemAvatar>\r\n                            <Tooltip title=\"Delete\" arrow>\r\n                              <IconButton aria-label=\"delete\">\r\n                                <DeleteIcon onClick={() => removeItem(item)} />\r\n                              </IconButton>\r\n                            </Tooltip>\r\n                          </ListItemAvatar>\r\n                          <ListItemText\r\n                            primary={`x${item.amount} ${item.size} ${item.name}`}\r\n                            secondary={`${currency.format(\r\n                              parseFloat(item.price * item.amount)\r\n                            )}`}\r\n                          />\r\n                        </ListItem>\r\n                        <Divider variant=\"inset\" component=\"li\" />\r\n                      </div>\r\n                    ))\r\n                  : \"Your cart is empty!\"}\r\n                {cartItems.length > 0 && (\r\n                  <>\r\n                    <i>\r\n                      Subtotal: {currency.format(subtotal)}\r\n                      <br />\r\n                      Tax: {currency.format(taxes)}\r\n                      <br />\r\n                    </i>\r\n                    <b>Total: {currency.format(total)}</b>\r\n                    <br />\r\n                    <br />\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      onClick={() => {\r\n                        setOpenCart(false);\r\n                        setCartItems([]);\r\n                        setOrderSuccess(true);\r\n                      }}\r\n                    >\r\n                      Checkout\r\n                    </Button>\r\n                  </>\r\n                )}\r\n              </List>\r\n            </DialogContentText>\r\n          </center>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </CartWrapper>\r\n  );\r\n};\r\n\r\nCart.propTypes = {\r\n  cartItems: PropTypes.array.isRequired,\r\n  setCartItems: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Cart;\r\n","import \"./App.css\";\nimport { React, useState, useEffect } from \"react\";\nimport Header from \"./Components/Header/Header\";\nimport Menu from \"./Components/Menu/Menu\";\nimport Cart from \"./Components/Cart/Cart\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport MuiAlert from \"@material-ui/lab/Alert\";\n\nconst Alert = (props) => {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n};\n\nconst App = () => {\n  const [cartItems, setCartItems] = useState([]);\n  const [tempItem, setTempItem] = useState({});\n  const [open, setOpenSuccess] = useState(false);\n  const [openCart, setOpenCart] = useState(false);\n  const [orderSuccess, setOrderSuccess] = useState(false);\n\n  const handleClose = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOpenSuccess(false);\n  };\n\n  const handleCloseOrder = (event, reason) => {\n    if (reason === \"clickaway\") {\n      return;\n    }\n    setOrderSuccess(false);\n  };\n\n  useEffect(() => {}, [cartItems]);\n\n  return (\n    <div className=\"App\">\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\n        <Alert onClose={handleClose} severity=\"success\">\n          Cart Updated!\n        </Alert>\n      </Snackbar>\n      <Snackbar\n        open={orderSuccess}\n        autoHideDuration={6000}\n        onClose={handleCloseOrder}\n      >\n        <Alert onClose={handleCloseOrder} severity=\"info\">\n          Order Placed!\n        </Alert>\n      </Snackbar>\n      <Header cartItems={cartItems} setOpenCart={setOpenCart} />\n      <Menu\n        cartItems={cartItems}\n        setCartItems={setCartItems}\n        tempItem={tempItem}\n        setTempItem={setTempItem}\n        setOpenSuccess={setOpenSuccess}\n      />\n      <Cart\n        cartItems={cartItems}\n        setCartItems={setCartItems}\n        setOpenSuccess={setOpenSuccess}\n        openCart={openCart}\n        setOpenCart={setOpenCart}\n        setOrderSuccess={setOrderSuccess}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}